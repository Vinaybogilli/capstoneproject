package com.example.surya.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.example.surya.filter.JwtAuthenticationFilter;

@Configuration
public class GatewayConfig {

    @Autowired
    private JwtAuthenticationFilter jwtAuthenticationFilter;

    @Bean
    public RouteLocator routes(RouteLocatorBuilder builder) {
        return builder.routes()

                // Auth service route - publicly accessible (no JWT required)
                .route("userauth-service-route", r -> r.path("/api/auth/**")
                        .uri("lb://USER-AUTHENTICATION-SERVICE"))

                // Customer service route - token required
                .route("customer-service-route", r -> r.path("/api/customer/**")
                        .filters(f -> {
                            JwtAuthenticationFilter.Config config = new JwtAuthenticationFilter.Config();
                            
                            return f.filter(jwtAuthenticationFilter.apply(config));
                        })
                        .uri("lb://CustomerService"))

                // Account service route - token required
                .route("account-service-route", r -> r.path("/api/bank/**")
                        .filters(f -> {
                            JwtAuthenticationFilter.Config config = new JwtAuthenticationFilter.Config();
                            
                            return f.filter(jwtAuthenticationFilter.apply(config));
                        })
                        .uri("lb://AccountService"))

                // Payment service route - token required
                .route("payment-service-route", r -> r.path("/payments/**")
                        .filters(f -> {
                            JwtAuthenticationFilter.Config config = new JwtAuthenticationFilter.Config();
                            config.setRequiresRole(true);
                            return f.filter(jwtAuthenticationFilter.apply(config));
                        })
                        .uri("lb://PaymentService"))

                // Audit service route - token required
                .route("audit-service-route", r -> r.path("/api/audit/**")
                        .filters(f -> {
                            JwtAuthenticationFilter.Config config = new JwtAuthenticationFilter.Config();
                            config.setRequiresRole(true);
                            return f.filter(jwtAuthenticationFilter.apply(config));
                        })
                        .uri("lb://AUDIT-SERVICE"))
                
                .route("admin-service-route", r -> r.path("/api/admin/**")
                        .filters(f -> {
                            JwtAuthenticationFilter.Config config = new JwtAuthenticationFilter.Config();
                            config.setRequiresRole(true);
                            config.setRequiredRole("ADMIN"); 
                            return f.filter(jwtAuthenticationFilter.apply(config));
                        })
                        .uri("lb://AdminService"))


                // Notification service route - token required
                .route("notification-service-route", r -> r.path("/api/notification/**")
                        .filters(f -> {
                            JwtAuthenticationFilter.Config config = new JwtAuthenticationFilter.Config();
                            config.setRequiresRole(true);
                            return f.filter(jwtAuthenticationFilter.apply(config));
                        })
                        .uri("lb://NOTIFICATION-SERVICE"))

                .build();
    }
}
